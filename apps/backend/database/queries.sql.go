// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
   university_id, name, name_short
) VALUES ($1, $2, $3)
RETURNING id, university_id, name, name_short, updated_at, created_at
`

type CreateCourseParams struct {
	UniversityID pgtype.UUID
	Name         string
	NameShort    string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse, arg.UniversityID, arg.Name, arg.NameShort)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.NameShort,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

type CreateDocumentsParams struct {
	ID           pgtype.UUID
	CreatedAt    pgtype.Timestamptz
	Title        string
	ThumbnailUrl string
	FileUrl      string
	Tag          string
	CourseID     pgtype.UUID
}

const createUniversity = `-- name: CreateUniversity :one
INSERT INTO universities (
    name, name_short, country, city, language
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, name_short, country, city, language, updated_at, created_at
`

type CreateUniversityParams struct {
	Name      string
	NameShort string
	Country   string
	City      string
	Language  string
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) (University, error) {
	row := q.db.QueryRow(ctx, createUniversity,
		arg.Name,
		arg.NameShort,
		arg.Country,
		arg.City,
		arg.Language,
	)
	var i University
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameShort,
		&i.Country,
		&i.City,
		&i.Language,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const findCourse = `-- name: FindCourse :one
SELECT id, university_id, name, name_short, updated_at, created_at, university_name, university_name_short FROM courses_populated WHERE id=$1
`

func (q *Queries) FindCourse(ctx context.Context, id pgtype.UUID) (CoursesPopulated, error) {
	row := q.db.QueryRow(ctx, findCourse, id)
	var i CoursesPopulated
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.NameShort,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UniversityName,
		&i.UniversityNameShort,
	)
	return i, err
}

const findUniversity = `-- name: FindUniversity :one
SELECT id, name, name_short, country, city, language, updated_at, created_at, course_ids, course_names, course_names_short FROM universities_populated WHERE id=$1
`

func (q *Queries) FindUniversity(ctx context.Context, id pgtype.UUID) (UniversitiesPopulated, error) {
	row := q.db.QueryRow(ctx, findUniversity, id)
	var i UniversitiesPopulated
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameShort,
		&i.Country,
		&i.City,
		&i.Language,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.CourseIds,
		&i.CourseNames,
		&i.CourseNamesShort,
	)
	return i, err
}
