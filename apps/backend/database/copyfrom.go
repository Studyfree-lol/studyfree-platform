// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateDocuments implements pgx.CopyFromSource.
type iteratorForCreateDocuments struct {
	rows                 []CreateDocumentsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDocuments) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDocuments) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].CreatedAt,
		r.rows[0].Title,
		r.rows[0].ThumbnailUrl,
		r.rows[0].FileUrl,
		r.rows[0].Tag,
		r.rows[0].CourseID,
	}, nil
}

func (r iteratorForCreateDocuments) Err() error {
	return nil
}

func (q *Queries) CreateDocuments(ctx context.Context, arg []CreateDocumentsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"documents"}, []string{"id", "created_at", "title", "thumbnail_url", "file_url", "tag", "course_id"}, &iteratorForCreateDocuments{rows: arg})
}
