// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateCourses implements pgx.CopyFromSource.
type iteratorForCreateCourses struct {
	rows                 []CreateCoursesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCourses) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCourses) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].CreatedAt,
		r.rows[0].UniversityID,
		r.rows[0].Name,
	}, nil
}

func (r iteratorForCreateCourses) Err() error {
	return nil
}

func (q *Queries) CreateCourses(ctx context.Context, arg []CreateCoursesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"courses"}, []string{"id", "created_at", "university_id", "name"}, &iteratorForCreateCourses{rows: arg})
}

// iteratorForCreateUniversities implements pgx.CopyFromSource.
type iteratorForCreateUniversities struct {
	rows                 []CreateUniversitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateUniversities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateUniversities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].CreatedAt,
		r.rows[0].Name,
	}, nil
}

func (r iteratorForCreateUniversities) Err() error {
	return nil
}

func (q *Queries) CreateUniversities(ctx context.Context, arg []CreateUniversitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"universities"}, []string{"id", "created_at", "name"}, &iteratorForCreateUniversities{rows: arg})
}
