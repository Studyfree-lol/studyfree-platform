// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ModelCourse defines model for model.Course.
type ModelCourse struct {
	Id         openapi_types.UUID           `json:"id"`
	Name       string                       `json:"name"`
	NameShort  string                       `json:"nameShort"`
	University ModelCourseUniversityPreview `json:"university"`
}

// ModelCoursePreview defines model for model.CoursePreview.
type ModelCoursePreview struct {
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	NameShort string             `json:"nameShort"`
}

// ModelCourseSearchPreview defines model for model.CourseSearchPreview.
type ModelCourseSearchPreview struct {
	Id                  openapi_types.UUID `json:"id"`
	NameShort           string             `json:"nameShort"`
	Title               string             `json:"title"`
	UniversityCountry   string             `json:"universityCountry"`
	UniversityId        string             `json:"universityId"`
	UniversityName      string             `json:"universityName"`
	UniversityNameShort string             `json:"universityNameShort"`
}

// ModelCourseSearchResult defines model for model.CourseSearchResult.
type ModelCourseSearchResult struct {
	Hits             []ModelCourseSearchPreview `json:"hits"`
	Limit            int                        `json:"limit"`
	ProcessingTimeMs int                        `json:"processingTimeMs"`
	Query            string                     `json:"query"`
}

// ModelCourseUniversityPreview defines model for model.CourseUniversityPreview.
type ModelCourseUniversityPreview struct {
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	NameShort string             `json:"nameShort"`
}

// ModelDocument defines model for model.Document.
type ModelDocument struct {
	FileUrl  string `json:"fileUrl"`
	Tag      string `json:"tag"`
	ThumbUrl string `json:"thumbUrl"`
	Title    string `json:"title"`
}

// ModelUniversity defines model for model.University.
type ModelUniversity struct {
	City      string               `json:"city"`
	Country   string               `json:"country"`
	Courses   []ModelCoursePreview `json:"courses"`
	Id        openapi_types.UUID   `json:"id"`
	Language  string               `json:"language"`
	Name      string               `json:"name"`
	NameShort string               `json:"nameShort"`
}

// ModelUniversityPreview defines model for model.UniversityPreview.
type ModelUniversityPreview struct {
	City      string             `json:"city"`
	Country   string             `json:"country"`
	Id        openapi_types.UUID `json:"id"`
	Language  string             `json:"language"`
	Name      string             `json:"name"`
	NameShort string             `json:"nameShort"`
}

// ModelUniversitySearchPreview defines model for model.UniversitySearchPreview.
type ModelUniversitySearchPreview struct {
	Country   string             `json:"country"`
	Id        openapi_types.UUID `json:"id"`
	NameShort string             `json:"nameShort"`
	Title     string             `json:"title"`
}

// ModelUniversitySearchResult defines model for model.UniversitySearchResult.
type ModelUniversitySearchResult struct {
	Hits             []ModelUniversitySearchPreview `json:"hits"`
	Limit            int                            `json:"limit"`
	ProcessingTimeMs int                            `json:"processingTimeMs"`
	Query            string                         `json:"query"`
}

// PostCoursesCourseIdDocumentsParams defines parameters for PostCoursesCourseIdDocuments.
type PostCoursesCourseIdDocumentsParams struct {
	Name string `form:"name" json:"name"`
}

// PostSearchCoursesParams defines parameters for PostSearchCourses.
type PostSearchCoursesParams struct {
	// Q Search Query
	Q string `form:"q" json:"q"`
}

// PostSearchUniversitiesParams defines parameters for PostSearchUniversities.
type PostSearchUniversitiesParams struct {
	// Q Search Query
	Q string `form:"q" json:"q"`
}

// GetUniversitiesParams defines parameters for GetUniversities.
type GetUniversitiesParams struct {
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`
}

// PostUniversitiesJSONBody defines parameters for PostUniversities.
type PostUniversitiesJSONBody struct {
	City      string `json:"city"`
	Country   string `json:"country"`
	Language  string `json:"language"`
	Name      string `json:"name"`
	NameShort string `json:"nameShort"`
}

// PostUniversitiesUniversityIdCoursesJSONBody defines parameters for PostUniversitiesUniversityIdCourses.
type PostUniversitiesUniversityIdCoursesJSONBody struct {
	Name      string `json:"name"`
	NameShort string `json:"nameShort"`
}

// PostUniversitiesJSONRequestBody defines body for PostUniversities for application/json ContentType.
type PostUniversitiesJSONRequestBody PostUniversitiesJSONBody

// PostUniversitiesUniversityIdCoursesJSONRequestBody defines body for PostUniversitiesUniversityIdCourses for application/json ContentType.
type PostUniversitiesUniversityIdCoursesJSONRequestBody PostUniversitiesUniversityIdCoursesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a specific course
	// (GET /courses/{courseId})
	GetCoursesCourseId(c *fiber.Ctx, courseId openapi_types.UUID) error
	// Get documents for a specific course
	// (GET /courses/{courseId}/documents)
	GetCoursesCourseIdDocuments(c *fiber.Ctx, courseId openapi_types.UUID) error
	// Push a new Document
	// (POST /courses/{courseId}/documents)
	PostCoursesCourseIdDocuments(c *fiber.Ctx, courseId openapi_types.UUID, params PostCoursesCourseIdDocumentsParams) error
	// Search for courses
	// (POST /search/courses)
	PostSearchCourses(c *fiber.Ctx, params PostSearchCoursesParams) error
	// Search for universities
	// (POST /search/universities)
	PostSearchUniversities(c *fiber.Ctx, params PostSearchUniversitiesParams) error
	// Get Universities
	// (GET /universities)
	GetUniversities(c *fiber.Ctx, params GetUniversitiesParams) error
	// Create new University
	// (POST /universities)
	PostUniversities(c *fiber.Ctx) error
	// Get specific University
	// (GET /universities/{universityId})
	GetUniversitiesUniversityId(c *fiber.Ctx, universityId openapi_types.UUID) error
	// Create new Course for University
	// (POST /universities/{universityId}/courses)
	PostUniversitiesUniversityIdCourses(c *fiber.Ctx, universityId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetCoursesCourseId operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", c.Params("courseId"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter courseId: %w", err).Error())
	}

	return siw.Handler.GetCoursesCourseId(c, courseId)
}

// GetCoursesCourseIdDocuments operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdDocuments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", c.Params("courseId"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter courseId: %w", err).Error())
	}

	return siw.Handler.GetCoursesCourseIdDocuments(c, courseId)
}

// PostCoursesCourseIdDocuments operation middleware
func (siw *ServerInterfaceWrapper) PostCoursesCourseIdDocuments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", c.Params("courseId"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter courseId: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCoursesCourseIdDocumentsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument name is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	return siw.Handler.PostCoursesCourseIdDocuments(c, courseId, params)
}

// PostSearchCourses operation middleware
func (siw *ServerInterfaceWrapper) PostSearchCourses(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSearchCoursesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := c.Query("q"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument q is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "q", query, &params.Q)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter q: %w", err).Error())
	}

	return siw.Handler.PostSearchCourses(c, params)
}

// PostSearchUniversities operation middleware
func (siw *ServerInterfaceWrapper) PostSearchUniversities(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSearchUniversitiesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := c.Query("q"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument q is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "q", query, &params.Q)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter q: %w", err).Error())
	}

	return siw.Handler.PostSearchUniversities(c, params)
}

// GetUniversities operation middleware
func (siw *ServerInterfaceWrapper) GetUniversities(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUniversitiesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetUniversities(c, params)
}

// PostUniversities operation middleware
func (siw *ServerInterfaceWrapper) PostUniversities(c *fiber.Ctx) error {

	return siw.Handler.PostUniversities(c)
}

// GetUniversitiesUniversityId operation middleware
func (siw *ServerInterfaceWrapper) GetUniversitiesUniversityId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "universityId" -------------
	var universityId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "universityId", c.Params("universityId"), &universityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter universityId: %w", err).Error())
	}

	return siw.Handler.GetUniversitiesUniversityId(c, universityId)
}

// PostUniversitiesUniversityIdCourses operation middleware
func (siw *ServerInterfaceWrapper) PostUniversitiesUniversityIdCourses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "universityId" -------------
	var universityId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "universityId", c.Params("universityId"), &universityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter universityId: %w", err).Error())
	}

	return siw.Handler.PostUniversitiesUniversityIdCourses(c, universityId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/courses/:courseId", wrapper.GetCoursesCourseId)

	router.Get(options.BaseURL+"/courses/:courseId/documents", wrapper.GetCoursesCourseIdDocuments)

	router.Post(options.BaseURL+"/courses/:courseId/documents", wrapper.PostCoursesCourseIdDocuments)

	router.Post(options.BaseURL+"/search/courses", wrapper.PostSearchCourses)

	router.Post(options.BaseURL+"/search/universities", wrapper.PostSearchUniversities)

	router.Get(options.BaseURL+"/universities", wrapper.GetUniversities)

	router.Post(options.BaseURL+"/universities", wrapper.PostUniversities)

	router.Get(options.BaseURL+"/universities/:universityId", wrapper.GetUniversitiesUniversityId)

	router.Post(options.BaseURL+"/universities/:universityId/courses", wrapper.PostUniversitiesUniversityIdCourses)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTY/bNhD9KwLbo2A7TXrRrXHaYlE0cbP1KdgDVxrZDCRSy48NDEP/vSApyRRF2fLG",
	"u/UWvRiWNBwO5z2+GXKPUlZWjAKVAiV7JNItlNj8LVkGxWzJFBegn3FRfMpR8mWPfuSQowT9MD+MnTcD",
	"5+6oFYdHAt9QHe9RxVkFXBIwvhUlj8AFkTv9NNXfuhvVea5jxOFBEQ4ZSr64fu9iJHcVoASx+6+QSlTf",
	"1TEKhZf40ZFM/+aMl1iiBClFMtR5E5ITukF1jCguTWKCH263jMvAVy9g49k4cocNY+9HfguYp9tLxD8W",
	"ZowkkUV4eYckL5miku9OWN1kJww+jiWyb3JOSm307hq9iAbzh2cLrXYaOp9BqEIOwdkSu9OIhFKcw/4+",
	"6HUXBOYc7/RzQUri5odQCRvg+lPFWQpCELr5m5TwpwhbPSgIgukl2Jq18wWcx3aRp/I03M6vaSd+YKkq",
	"gQYQzkkBa16EdxXehN9vVXk/OmhkK3oraDnfzu94tROPL2bd0+NzlD6gyQO1Tw3cT2P9KN+9xbdzHJP9",
	"CYRLmxQMMEiPSN1ElhaYbhTejDP1eSh8iD22y3MimcKIE8XmAol5WiEaYX+XBH/109d6QekeS+OrlG/t",
	"idCc6TkyECknlSSMogTdSpXtcg4Q/bK66crv8L3JhRnxZraYLXTUrAKKK4IS9Ha2mL3VAWG5NUucN5t6",
	"vrd/brJav96ASZNGBuv5dX+BfgdpBUMsG1vjieMSJHBh1IzoibX3dpskKD0YH3IkuYK4aYUnELi+04NF",
	"xWgjcj8tFnZnUNkUCFxVBUlNtPOvQidg7/ifqoUWgX7mP/2hk/jOztj/9B5n0Wd4UCCktXk3tPnIZPQb",
	"UzTTFj+HvNxQCZziIroF/gg8+pVzxg2phCpLrBmnkx/hSFSQkpykkU2qLTqiJ856WADVedYUU3EGvh+6",
	"Ma8G6DOEo2svhoXvejnQwRjljB9lxAFwXZ4rJuRw1pUS2whHFL51jiPJIrmFqCVU7LFkxcQV0CRuXLdK",
	"2/huKvO43yDdDHbvWbY7wrQqy/tE6yK8JxSbGHzftir8z+Uglx3mdbGHuav1TJjKPne63JbPQ3LaLmDZ",
	"0ddjpFdVjXH0V0OjEKcezifUCxSqXht1rSA32dVKdZCTFmOLaR/g7iaATEN57dr/96Ae6ZpfAdyqD0wQ",
	"cx/ssabkOMghHCt98HKhyyDH5rzxppNHqsp73dR/N4zedUqr2U86wRw5u0gmcbHCGwgeTfyT2sE4biIJ",
	"nzWutMtZh+nTY4zb1Qz1wfMwrcifAvdJVxfPfifxndcRL9qnTKD6ldJyyQFLMA2Lc5U3yk1f4OZ7927c",
	"PWT3Q+EgOYFHiEqQOMqwxE2jfxgeEZoWKiN0M9qke6q57l/Ln+7RvXv8az63O2Bcs6J157QLkGdaHzxG",
	"gNHO+Nl5cAkJfhbB/JdF8dQ1/NULol2AEaogvZ3LKe3C+LScU7xACdpKWQlU39X/BAAA///iai7bLB8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
