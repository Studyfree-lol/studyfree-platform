// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PostCoursesCourseIdDocumentsParamsTag.
const (
	Exam     PostCoursesCourseIdDocumentsParamsTag = "exam"
	Exercise PostCoursesCourseIdDocumentsParamsTag = "exercise"
	Notes    PostCoursesCourseIdDocumentsParamsTag = "notes"
	Slides   PostCoursesCourseIdDocumentsParamsTag = "slides"
)

// ModelDocument defines model for model.Document.
type ModelDocument struct {
	FileUrl  string             `json:"fileUrl"`
	Id       openapi_types.UUID `json:"id"`
	Tag      string             `json:"tag"`
	ThumbUrl string             `json:"thumbUrl"`
	Title    string             `json:"title"`
}

// ModelUniversityPreview defines model for model.UniversityPreview.
type ModelUniversityPreview struct {
	Id    openapi_types.UUID `json:"id"`
	Title string             `json:"title"`
}

// PostCoursesCourseIdDocumentsMultipartBody defines parameters for PostCoursesCourseIdDocuments.
type PostCoursesCourseIdDocumentsMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PostCoursesCourseIdDocumentsParams defines parameters for PostCoursesCourseIdDocuments.
type PostCoursesCourseIdDocumentsParams struct {
	Name string                                `form:"name" json:"name"`
	Tag  PostCoursesCourseIdDocumentsParamsTag `form:"tag" json:"tag"`
}

// PostCoursesCourseIdDocumentsParamsTag defines parameters for PostCoursesCourseIdDocuments.
type PostCoursesCourseIdDocumentsParamsTag string

// GetUniversitiesParams defines parameters for GetUniversities.
type GetUniversitiesParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostCoursesCourseIdDocumentsMultipartRequestBody defines body for PostCoursesCourseIdDocuments for multipart/form-data ContentType.
type PostCoursesCourseIdDocumentsMultipartRequestBody PostCoursesCourseIdDocumentsMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get specific Document
	// (GET /courses/{courseId}/documents)
	GetCoursesCourseIdDocuments(c *fiber.Ctx, courseId openapi_types.UUID) error
	// Push a new Document
	// (POST /courses/{courseId}/documents)
	PostCoursesCourseIdDocuments(c *fiber.Ctx, courseId openapi_types.UUID, params PostCoursesCourseIdDocumentsParams) error
	// Get all Universities
	// (GET /universities)
	GetUniversities(c *fiber.Ctx, params GetUniversitiesParams) error
	// Get specific University
	// (GET /universities/{universityId})
	GetUniversitiesUniversityId(c *fiber.Ctx, universityId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetCoursesCourseIdDocuments operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdDocuments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", c.Params("courseId"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter courseId: %w", err).Error())
	}

	return siw.Handler.GetCoursesCourseIdDocuments(c, courseId)
}

// PostCoursesCourseIdDocuments operation middleware
func (siw *ServerInterfaceWrapper) PostCoursesCourseIdDocuments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", c.Params("courseId"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter courseId: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCoursesCourseIdDocumentsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument name is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Required query parameter "tag" -------------

	if paramValue := c.Query("tag"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument tag is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "tag", query, &params.Tag)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tag: %w", err).Error())
	}

	return siw.Handler.PostCoursesCourseIdDocuments(c, courseId, params)
}

// GetUniversities operation middleware
func (siw *ServerInterfaceWrapper) GetUniversities(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUniversitiesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	return siw.Handler.GetUniversities(c, params)
}

// GetUniversitiesUniversityId operation middleware
func (siw *ServerInterfaceWrapper) GetUniversitiesUniversityId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "universityId" -------------
	var universityId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "universityId", c.Params("universityId"), &universityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter universityId: %w", err).Error())
	}

	return siw.Handler.GetUniversitiesUniversityId(c, universityId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/courses/:courseId/documents", wrapper.GetCoursesCourseIdDocuments)

	router.Post(options.BaseURL+"/courses/:courseId/documents", wrapper.PostCoursesCourseIdDocuments)

	router.Get(options.BaseURL+"/universities", wrapper.GetUniversities)

	router.Get(options.BaseURL+"/universities/:universityId", wrapper.GetUniversitiesUniversityId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWy27rNhD9FWLapWq5TbrRrknawijQGg28CrygxbHNQCKV4dCJYOjfC1LyQ5aduF30",
	"3gB3ZUacx5k5Z4bZQm7Lyho07CDbgsvXWMp4LK3CYvRgc1+i4fClIlshscZ4v9QFzqgIR64rhAwckzYr",
	"aBLQKlpYKiVDBt5rBcnQjOXqrDuvfbm4FJs1F3jmpkmA8MVrQgXZE7QZo22yx3oUus0+36Oyi2fMOSRo",
	"C58ZvUFymusp4Ubj67AD11b5rwEPUQVjbZY2hFHoctIVa2sgg0f2ql4SovhlOtlHGH6PxUSPH0fj0TgA",
	"sxUaWWnI4GY0Ht1AApXkdSwtza0nhy7dtoeJalLVSSEarJCHWAiZNG5QSFEiSxEQh+Zoa4RcWM9CCldh",
	"rpc6F7twEIFQtJooyOB35Ps2+32X+2GfOUAkWSIjOcietqBD3gAbEjCyDJXvEMNxf5k8Jp28r2CtmQdn",
	"V1njWq5/Go/DT24Nd9Mgq6rQeYSdPrtQ//YovmYso+P3hEvI4Lv0MGhpN2XpyYg1exiSSNYt6/0O//VH",
	"sLptwfSv7qQSf+OLR8etze3Q5k/L4jfrjQoWP5+LMjGMZGQhHpE2SOJXIktRq86XpaS6JehA48OBRpar",
	"QAochDJvEqisOyOVqXdrIYXB170QBFvBaxSd9Aa6mFr3FQgj6UK/eKT6EDv+vBf3yjhhKb0XBo0vQ4/x",
	"TZbBy3LslCu0igd8Q8q1O94hfU1HgdxZVZ/IufQF60oSp6EDPyjJsq/o4fbvtWuhjYyFDLfcYJc134br",
	"4nAdDcYHo9UkkPrdK9XR8sFaLgrR8zizemf9+3NTdSJZh5LyMGaXxf4/btPhu/2Z1mpg6ISBHfU94obs",
	"p9v9X/VENR+LIb7QYczF0pKQB2HUQpu88Eqb1cVdfCKU2VHqq1ax7zt8uXf6PwnqM7zLB9jvaCi4x3gt",
	"UT78yw1r5spBM2/+CQAA//8HwL6THQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
